#!/usr/bin/env python3

from game import Game
import sys, socket, ssl
from threading import Thread
from optparse import OptionParser, OptionGroup


parser = OptionParser()
parser.add_option("-p","--port",dest="port",
    help="Port to listen on", metavar="PORT",
    default=8888)
group = OptionGroup(parser,"Running secure server")
group.add_option("-s","--ssl",dest="ssl",action="store_true",
    help="Enable secure server",default=False)
group.add_option("-n","--host",dest="host",
    help="Hostname to bind service to", metavar="HOSTNAME",
    default='')
group.add_option("-c","--cert",dest="cert",
    help="Certificate file for SSL/TLS",metavar="CERT",
    default="ssl.crt")
group.add_option("-k","--key",dest="key",
    help="Private key file for certificate",metavar="KEY",
    default="ssl.key")

parser.add_option_group(group)

(opt,args) = parser.parse_args()

#Init SSL
if opt.ssl:
    context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
    context.load_cert_chain(certfile=opt.cert, keyfile=opt.key)

#Bind socket to local host and port
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

# Wrap socket in SSL layer
if opt.ssl:
    s = context.wrap_socket(s, server_side=True)

try:
    s.bind((opt.host, int(opt.port)))
except OSError as o:
    print('Bind failed. Error Code[' + str(o.errno) + '] Message [' + o.strerror + ']' )
    sys.exit()

#Start listening on socket
s.listen(10)

def handleUser(conn,game):
    game.auth(conn)
    conn.close()

class Net:
    def __init__(self,conn):
        self.conn = conn
    def send(self,msg):
        self.conn.send(bytearray(msg,'UTF-8'))
    def recv(self):
        s = self.conn.recv(512).decode('UTF-8',"ignore")
        return(s)
      
    def close(self):
            self.conn.close()


g= Game("game.db")

while g.ADMIN_RUNNING:
    #wait to accept a connection - blocking call
    conn, addr = s.accept()
    print('Connected with ' + addr[0] + ':' + str(addr[1]))
    #start new thread takes 1st argument as a function name to be run, second is the tuple of arguments to the function.
    t = Thread(target=handleUser,args=(Net(conn),g))
    t.start()

s.close()



